package {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	public class Pointer extends MovieClip	{		var mRef:MovieClip;		var moveSpeedMax:Number = 1000;		var rotateSpeedMax:Number = 15;		var decay:Number = .98;		var destinationX:int = 150;		var destinationY:int = 150;		var isActive:Boolean = false;		var _dx:Number = 0;		var _dy:Number = 0;		var _vx:Number = 0;		var _vy:Number = 0;		var trueRotation:Number = 0;		var xDist:Number = 0;		var yDist:Number = 0;		var directDist:Number = 0;		public function Pointer()		{			stage.addEventListener(Event.ENTER_FRAME,gLoop);			mRef = MovieClip(this.parent);		}		function gLoop(event:Event):void		{			if (mRef.player1.playerOne == false)			{								mRef.player2.playerTwo = false;				xDist = this.x - mRef.player1.x;				//trace(xDist);				yDist = this.y - mRef.player1.y;				directDist = Math.sqrt((xDist * xDist) + (yDist * yDist));				trace(directDist);				if ((directDist < 250))				{					isActive = true;				}								_dx = this.x - destinationX;				_dy = this.y - destinationY;				var rotateTo:Number = getDegrees(getRadians(_dx,_dy));				if ((rotateTo > this.rotation + 180))				{					rotateTo -=  360;				}				if ((rotateTo < this.rotation - 180))				{					rotateTo +=  360;				}				trueRotation = (rotateTo - this.rotation) / rotateSpeedMax;				this.rotation +=  trueRotation;				if (isActive == true)				{					destinationX = mRef.player1.x;					destinationY = mRef.player1.y;					_vx +=  (destinationX - this.x) / moveSpeedMax;					_vy +=  (destinationY - this.y) / moveSpeedMax;				}				else				{					_vx +=  (destinationX - this.x) / moveSpeedMax * .25;					_vy +=  (destinationY - this.y) / moveSpeedMax * .25;				}				_vx *=  decay;				_vy *=  decay;				if ((getDistance(_dx,_dy) < 50))				{					trueRotation *=  .5;				}				this.x +=  _vx;				this.y +=  _vy;			}			function getDistance(delta_x:Number, delta_y:Number):Number			{				return Math.sqrt((delta_x*delta_x)+(delta_y*delta_y));			}			function getRadians(delta_x:Number, delta_y:Number):Number			{				var r:Number = Math.atan2(delta_y,delta_x);				if (delta_y < 0)				{					r +=  (2 * Math.PI);				}				return r;			}			function getDegrees(radians:Number):Number			{				return Math.floor(radians/(Math.PI/180));			}		}	}}